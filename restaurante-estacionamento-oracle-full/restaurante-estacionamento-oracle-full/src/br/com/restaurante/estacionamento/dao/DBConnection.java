package br.com.restaurante.estacionamento.dao;

import br.com.restaurante.estacionamento.exception.EstacionamentoException;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

public class DBConnection {
    private static DBConnection instance;
    private Connection connection;
    private final String DB_URL = "jdbc:oracle:thin:@oracle.fiap.com.br:1521:orcl";
    private final String DB_USER = "rm558193";
    private final String DB_PASSWORD = "030905";

    private DBConnection() throws EstacionamentoException {
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            initializeDatabase();
        } catch (ClassNotFoundException e) {
            throw new EstacionamentoException("Driver Oracle JDBC n√£o encontrado. Inclua ojdbc8.jar no classpath.", e);
        } catch (SQLException e) {
            throw new EstacionamentoException("Erro ao conectar ao banco Oracle: " + e.getMessage(), e);
        }
    }

    private void initializeDatabase() throws SQLException {
        String createVehicles = "CREATE TABLE vehicles (" +
                "id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                "plate VARCHAR2(20) UNIQUE NOT NULL," +
                "entry_time TIMESTAMP NOT NULL," +
                "exit_time TIMESTAMP," +
                "paid_amount NUMBER" +
                ")";
        String createPayments = "CREATE TABLE payments (" +
                "id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                "vehicle_id NUMBER NOT NULL," +
                "amount NUMBER NOT NULL," +
                "paid_at TIMESTAMP NOT NULL," +
                "CONSTRAINT fk_vehicle FOREIGN KEY(vehicle_id) REFERENCES vehicles(id)" +
                ")";

        try (Statement stmt = connection.createStatement()) {
            try { stmt.executeUpdate(createVehicles); } catch (SQLException ignored) {}
            try { stmt.executeUpdate(createPayments); } catch (SQLException ignored) {}
        }
    }

    public static DBConnection getInstance() throws EstacionamentoException {
        if (instance == null) {
            instance = new DBConnection();
        }
        return instance;
    }

    public Connection getConnection() { return connection; }

    public void close() {
        try {
            if (connection != null && !connection.isClosed()) connection.close();
        } catch (SQLException ignored) {}
        instance = null;
    }
}
